<?php

/**
 * @csv2meta.module
 *
 * Module to convert a CSV file to metadata using YAML to control
 * how that would happen
 */

require_once("metadataobj.inc");

const FILE_PREFIX = "item";
const DEFAULT_EXT = "txt";

function csv2meta_execute($csvname,$yamlname,$outdirname,$zipname=None, $delim="\t") {
  $header = "";

  // read in the YAML glue file
  $yaml = yaml_parse_file($yamlname,-1);
  if ($yaml !== FALSE) {
    // set this in case the CSV was formatted on a mac
    ini_set('auto_detect_line_settings',TRUE);
    // start reading the CSV file
    $csv = fopen($csvname,"r");
    if ($csv !== FALSE) {
      $zip = None;
      if ($zipname !== None) {
        $zip = new ZipArchive();
        $zip->open($zipname,ZipArchive::CREATE);
      }
      // for each row of the csv, read it. ignore whitespace, first
      // populated line is the header for the YAML conversion values
      // everything else is one item per row
      $headerfound = FALSE;
      while ((!feof($csv)) && ($headerfound == FALSE)) {
        if (!$line = fgetcsv($csv,1024,$delim)) {
          continue;
        }
        // at this point, $line contains the first line in the file
        // which is suppsoed to be the header that is used for the
        // YAML Header => MODS/PBCORE/?? conversion
        $header = $line;
        $headerfound = TRUE;
      }
      // continue with the rest of the lines in the file
      $itemcnt = 1;
      while (($line = fgetcsv($csv,1024,$delim)) !== FALSE) {
        $filename = ""; 
        // initialize the DOM/XML object
        $xml = new DomDocument("1.0");
        $obj = new MODSMetadataObject();
        $obj->init($xml);

        // for each cell, work out the correct MD field
        for ($cnt=0; $cnt < sizeof($line); $cnt++) {
          $headval = $header[$cnt];
          $mdfield = $yaml[0][$headval];
          $attrib = "";
          if (!empty($mdfield))
          {
            if (is_array($mdfield)) {
              $attrib = $mdfield["attribute"];
              $mdfield = $mdfield["path"];
            }
            /* check if the current cell is the one used for
               the filename.
            */
            if ($header[$cnt] == $yaml[0]["filename"]) {
              $filename = $line[$cnt];
            }
            $mdval = $line[$cnt];
            // now we have the metadata field and the value
            $obj->render($xml, $mdfield, $mdval, $attrib);
          }
        }
        // add  the fixedN fields from the YAML file
        $cnt=1;
        do {
          $fixedfound = FALSE;
          $field = sprintf("fixed%d",$cnt);
          $valarr = $yaml[0][$field];
          if ((sizeof($valarr)) > 0) {
            drush_print("found ".$field);
            $fixedfound = TRUE;
            $cnt = $cnt+1;
            $attrib = "";
            if (array_key_exists("attribute",$valarr))
              $attrib = $valarr["attribute"];
            $obj->render($xml, $valarr["path"], $valarr["value"], $attrib);
          }
        } while ($fixedfound === TRUE);
        // save the metadata to a file somewhere
        $metadata = $xml->saveXML($xml,LIBXML_NOEMPTYTAG);
        if (strlen($filename) == 0) {
          $filename = sprintf("%s%04d.%s",FILE_PREFIX,$itemcnt,DEFAULT_EXT);
        }
        else {
          $filename = sprintf("%s.%s",$filename,DEFAULT_EXT);
        }
        $outpath = sprintf("%s/%s",$outdirname,$filename);
        $outfile = fopen($outpath,"w");
        if ($outfile != FALSE) {
          fputs($outfile,$metadata);
          fclose($outfile);
          /* if the user selected a zip file output, add the
             metadata files to a zip file
          */ 
          if ($zipname !== None) {
            $zip->addFile($outpath, basename($outpath));
          }
        }
        $itemcnt = $itemcnt + 1;
      }
      if ($zipname !== None) {
        $zip->close();
      }
    }
    fclose($csv);
  }  
}
